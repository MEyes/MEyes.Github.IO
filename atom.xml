<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[我的博客]]></title>
  <link href="http://meyes.github.io/atom.xml" rel="self"/>
  <link href="http://meyes.github.io/"/>
  <updated>2016-01-18T23:55:28+08:00</updated>
  <id>http://meyes.github.io/</id>
  <author>
    <name><![CDATA[Wang Bin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cronoworks 敏捷开发解决方案]]></title>
    <link href="http://meyes.github.io/blog/2016/01/18/Cronoworks-Scrum-Solution/"/>
    <updated>2016-01-18T23:30:13+08:00</updated>
    <id>http://meyes.github.io/blog/2016/01/18/Cronoworks-Scrum-Solution</id>
    <content type="html"><![CDATA[<h1>什么是敏捷开发</h1>

<p>敏捷开发(Agile Development)是一种以人为核心、迭代、循序渐进的开发方法。
怎么理解呢？首先，我们要理解它不是一门技术，它是一种开发方法，也就是一种软件开发的流程，它会指导我们用规定的环节去一步一步完成项目的开发，而这种开发方式的主要驱动核心是人，它采用的是迭代式开发。<!--more--></p>

<h1>为什么说是以人为核心</h1>

<p>我们大部分人都学过瀑布开发模型，它是以文档为驱动的，为什么呢？因为在瀑布的整个开发过程中，要写大量的文档，把需求文档写出来后，开发员都是根据文档进行开发的，一切以文档为依据，开发完成后将进行测试，评审，最终部署到正式环境。瀑布流模式每一步往往依赖前一环节的结果，一旦某个环节搁置了，有可能会影响整个软件开发进度。瀑布流模型如下所示：</p>

<p><img src="./media/image1.png" alt="" /></p>

<p>而敏捷开发它只写有必要的文档，或尽量少写文档，敏捷开发注重的是人与人之间，面对面的交流，所以它强调以人为核心。同时，敏捷开发以冲刺（Sprint）的形式在最短的时间里完成一次计划的迭代，包括计划，实施，测试，评审，</p>

<p><img src="./media/image2.png" alt="" /></p>

<h1>什么是Scrum</h1>

<p>Scrum是一种迭代式增量软件开发过程，通常用于敏捷软件开发。在这个框架中，整个开发过程由若干个短的迭代周期组成，一个短的迭代周期称为一个Sprint，每个Sprint的建议长度是2到4周(互联网产品研发可以使用1周的Sprint)。在Scrum中，使用产品Backlog来管理产品的需求，产品Backlog是一个按照商业价值排序的需求列表，列表条目的体现形式通常为用户故事。Scrum团队总是先开发对客户具有较高价值的需求。在Sprint中，Scrum团队从产品Backlog中挑选最高优先级的需求进行开发。挑选的需求在Sprint计划会议上经过讨论、分析和估算得到相应的任务列表，我们称它为Sprint Backlog。在每个迭代结束时，Scrum团队将递交潜在可交付的产品增量。 Scrum起源于软件开发项目，但它适用于任何复杂的或是创新性的项目，Scrum的流程图如下所示：</p>

<p><img src="./media/image3.png" alt="" /></p>

<h1>什么是Sprint</h1>

<p>正如上述那样，Scrum是一种迭代和增量式的产品开发方法。Scrum通过Sprint来实现迭代，Sprint是短距离赛跑的意思，这里面指的是一次迭代。一个Sprint是指一个1周－4周的迭代，它是一个时间盒。Sprint的长度一旦确定，保持不变。Sprint的产出是“完成”的、可用 的、潜在可发布的产品增量。Sprint 在整个开发过程中的周期一致。新的 Sprint 在上一 个 Sprint 完成之后立即开始。 Sprint 包含并由 Sprint 计划会议、每日站会、开发工作、Sprint 评审会议和 Sprint 回顾会议构成。</p>

<h1>Scrum开发流程中的三大角色</h1>

<p>Scrum团队中包括三个角色，他们分别是产品负责人（Product Owner）、Scrum Master和开发团队。</p>

<h2>1.产品负责人</h2>

<p>产品负责人是管理产品待办事项列表(Product Backlog)的唯一责任人。产品待办事项列表的管理包括:</p>

<ul>
<li><p> 清晰地表达产品代办事项列表条目(语法：作为..想..以便于)</p></li>
<li><p> 对产品代办事项列表中的条目进行排序，最好地实现目标和使命</p></li>
<li><p> 确保产品代办事项列表对所有人可见、透明、清晰，并且显示 Scrum 团队的下一步工作</p></li>
<li><p> 确保开发团队对产品代办事项列表中的条目达到一定程度的理解</p></li>
<li><p> 为保证产品负责人的工作取得成功,组织中的所有人员都必须尊重他的决定。产品负 责人所作的决定在产品待办事项列表的内容和排序中要清晰可见。任何人都不得要求开发 团队按照另一套需求开展工作,开发团队也不允许听从任何其他人的指令。</p></li>
</ul>


<h2>2.Scrum Master</h2>

<ul>
<li><p>Scrum Master 负责确保 Scrum 被理解并实施。为了达到这个目的,Scrum Master要确保 Scrum 团队遵循 Scrum 的理论、实践和规则。Scrum Master是Scrum团队中的服务式领导。</p></li>
<li><p>Scrum Master 帮助 Scrum 团队外的人员了解他们如何与 Scrum 团队交互是有益的。 Scrum Master 通过改变这些交互来最大化 Scrum 团队所创造的价值。</p></li>
</ul>


<h2>3.开发团队</h2>

<p>开发团队包含了专业人员,负责在每个 Sprint 的结尾交付潜在可发布的“完成”产 品增量。只有开发团队的成员才能创造增量。</p>

<h1>用户故事描述</h1>

<p>用户故事是从用户的角度来描述用户渴望得到的功能。一个好的用户故事包括三个要素：</p>

<ul>
<li><p>角色：谁要使用这个功能。</p></li>
<li><p>活动：需要完成什么样的功能。</p></li>
<li><p>商业价值：为什么需要这个功能，这个功能带来什么样的价值。</p></li>
</ul>


<p>用户故事通常按照如下的格式来表达：</p>

<ul>
<li><p>英文：As a , I want to , so that .</p></li>
<li><p>中文：作为一个&lt;角色&gt;, 我想要&lt;活动&gt;, 以便于&lt;商业价值&gt;</p></li>
</ul>


<p>举例：作为一个“网站管理员”，我想要“统计每天有多少人访问了我的网站”，以便于“我的赞助商了解我的网站会给他们带来什么收益。”</p>

<p>需要注意的是用户故事不能够使用技术语言来描述，要使用用户可以理解的业务语言来描述。</p>

<h1>如何进行Scrum开发</h1>

<ul>
<li><p>我们首先需要确定一个Product Backlog（按优先顺序排列的一个产品需求列表），这个是由Product Owner 负责的</p></li>
<li><p>Scrum Team根据Product Backlog列表，做工作量的预估和安排；有了Product Backlog列表，我们需要通过 Sprint Planning Meeting（Sprint计划会议） 来从中挑选出若干个User Story作为本次迭代完成的目标，这个目标的时间周期是1~4个星期，然后把这个Story进行细化成Task，形成一个Sprint Backlog</p></li>
<li><p>Sprint Backlog是由Scrum Team去完成的，每个成员根据Sprint Backlog再细化成更小的Task（对应于Worktile上称为检查项），当团队成员完成任务时，务必需要在Worktile和敏捷白板上同步更新状态</p></li>
<li><p>在Scrum Team完成计划会议上选出的Sprint Backlog过程中，需要进行 Daily Scrum Meeting（每日站立会议），每次会议控制在15分钟左右，每个人都必须发言，并且要向所有成员当面汇报你昨天完成了什么，并且向所有成员承诺你今天要完成什么，同时遇到不能解决的问题也可以提出，每个人回答完成后，要走到黑板前更新自己的 Sprint burn down（Sprint燃尽图）；</p></li>
<li><p>做到每日集成，也就是每天都要有一个可以成功编译、并且可以演示的版本；</p></li>
<li><p>当User Story完成，也就是Sprint Backlog被完成，也就表示一次Sprint完成，这时，我们要进行 Sprint Review Meeting（演示会议），也称为评审会议，产品负责人和客户都要参加（最好本公司老板也参加），每一个Scrum Team的成员都要向他们演示自己完成的软件产品（这个会议非常重要，一定不能取消）；</p></li>
<li><p>最后就是 Sprint Retrospective Meeting（回顾会议），也称为总结会议，以轮流发言方式进行，每个人都要发言，总结并讨论改进的地方，放入下一轮Sprint的产品需求中</p></li>
</ul>


<p>了解了Scrum开发流程之后，我们使用Worktile 和敏捷白板这两个工具来进行敏捷管理，使用Worktile 可以进行任务的分配、归档，如下所示：</p>

<p><img src="./media/image4.png" alt="" /></p>

<p>使用敏捷白板来跟踪任务，如下所示:</p>

<p><img src="./media/image5.png" alt="" /></p>

<p>值得注意的是，当完成任务时，务必要及时更新状态，以便于团队了解整体进度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cronoworks 敏捷团队行为规范与准则]]></title>
    <link href="http://meyes.github.io/blog/2016/01/18/Cronoworks-Scrum-Specification/"/>
    <updated>2016-01-18T23:27:45+08:00</updated>
    <id>http://meyes.github.io/blog/2016/01/18/Cronoworks-Scrum-Specification</id>
    <content type="html"><![CDATA[<h1>1.序言</h1>

<blockquote><p>打造一个金诚所至的敏捷团队，需要大家自发的来遵守以及完善相应的规范。大家在自我约束的前提下，彼此之间互相影响，由下而上推动团队的建设。所以规矩、准则应该是越少越好，通过良好的自我约束驱动团队的成长。<!--more--></p>

<p>在阅读本文档之前，假设你已经了解了敏捷开发(Scrum)的相关知识，若从未接触过敏捷开发，请先查阅 《Cronoworks 敏捷开发解决方案》。</p></blockquote>

<h1>2. 敏捷团队的共识</h1>

<h2>2.1 精诚合作</h2>

<ul>
<li><p>产品不只属于我个人，整个开发团队都必须对其负责。那么在需求评估、迭代计划、需求评审、开发、设计交流的时候，大家都应该积极参与，献计献策</p></li>
<li><p>必须达成共识，必须明确每次迭代的内容，而且知晓自己的和整个产品的进度</p></li>
<li><p>积极沟通，当然文档不是必须的，但是有准备的沟通是必须的</p></li>
<li><p>及时沟通，不过于依赖文档和工具，比如任务在Worktile上分配完毕，也给他们打个招呼。</p></li>
</ul>


<h2>2.2 按时参加每日站立会议</h2>

<ul>
<li><p>目的</p>

<ul>
<li><p>  团队成员间工作进度的沟通和协调；</p></li>
<li><p>  帮助团队聚焦于每日活动，并且便于更新任务板和燃尽图；</p></li>
<li><p>  细化任务，尽可能的将任务具体到天，让大家都明确知道今天应该做什么！</p></li>
<li><p>  时间：每日下午5点，时长控制在15分钟左右</p></li>
</ul>
</li>
<li><p>内容</p>

<ul>
<li><p> 从上次站立会议到现在，你完成了什么?</p></li>
<li><p> 从现在到下次站立会议，你将要做什么?</p></li>
<li><p> 你遇到什么阻碍，需要其它人如何帮你?</p></li>
</ul>
</li>
<li><p>注意</p>

<ul>
<li>不要迟到，延时，或者坐下</li>
<li>不要在会议中讨论技术细节以及沟通需求。</li>
</ul>
</li>
<li><p>提示</p>

<ul>
<li>团队成员在聆听他人发言时，都应该想这个问题：“我该怎么帮他做得更快？”</li>
</ul>
</li>
</ul>


<h2>2.3 如果有必要，准备反思会议</h2>

<p>根据项目需要举行。其目的不是为了找到治愈方案，而是要发现哪些方面需要改进。项目成员均可召开与推进。</p>

<ul>
<li><p>要求</p>

<ul>
<li><p> 从过去中学习，指导将来</p></li>
<li><p> 改进团队的生产力</p></li>
<li><p> 轮流发言。每个人都有机会在不被人打断的情况下讲出自己的想法，他认为什么是好的，哪些可以做的更好，哪些需要改变</p></li>
</ul>
</li>
<li><p>注意</p>

<ul>
<li>  不要在团队之外讨论找到的东西。</li>
</ul>
</li>
<li><p>会议内容</p>

<ul>
<li><p>  过去哪些做的不错？哪些应该改进？</p></li>
<li><p>  我们能做什么？哪些不在我们掌控之内？</p></li>
<li><p>  意见交流</p></li>
</ul>
</li>
</ul>


<h2>2.4 保持可持续的开发速度/精力充沛的工作</h2>

<ul>
<li><p>尽可能避免加班（几乎所有的敏捷开发模式都反对加班，因为加班工作在软件开发中会降低生产率，而且会降低产品质量。我们目前还无法保障不加班，但是我们要尽可能的避免加班——将当天的事情在工作时间内完成）。</p></li>
<li><p>上班时间保持充沛的精力（比如早睡早起，喝点咖啡等等）</p></li>
<li><p>集中精力</p></li>
</ul>


<h2>2.5 参加每周讲座</h2>

<p>这是一个自我锻炼和学习的机会，愿景是人人上台分享知识。</p>

<ul>
<li><p>目的：鼓励大家交流、分享、学习甚至是反思。</p></li>
<li><p>讲座内容：技术、经验、心得、建议、产品与团队思考均可，亦可召开反思会议。</p></li>
<li><p>机制：每周一次，一次仅限一人，轮流讲座，次序可以根据需要调整。</p></li>
<li><p>时间：每周五下午评审会议之后，时间和日期可以更改，但是需要提前通知。如非客观原因，否则不能取消。</p></li>
<li><p>要求：必须准备PPT以及演讲素材。</p></li>
<li><p>时长：半小时左右。</p></li>
<li><p>讲师：敏捷团队成员。</p></li>
<li><p>参与人：无限制，自愿参加 </p></li>
<li><p>注意：讲座完成，需要将PPT和相关资料附加到Worktile任务列表，后续统一归档。</p></li>
</ul>


<h1>3.Worktile的使用规范</h1>

<p>Worktile在敏捷开发中主要扮演了任务归档角色，因为Worktile 提供了非常灵活的任务列表以及任务（User Story、Task）创建、分配等，如下所示：<img src="http://meyes.github.io/images/image1.png" alt="" /></p>

<p>敏捷白板作为Worktile的补充，可以实时的跟踪任务，绘制燃尽图等，如下所示：</p>

<p><img src="http://meyes.github.io/images/image2.png" alt="" /></p>

<h2>3.1 要求</h2>

<ul>
<li><p>User Story 尽量使用作为…想…以便于…这样的语法描述</p></li>
<li><p>每次Sprint必须指定开始日期与结束日期</p></li>
<li><p>使用真人头像、真实姓名</p></li>
<li><p>在岗时间务必要查看Worktile 工作内容并及时更新任务状态，确保Worktile 与敏捷白板之间双向信息的同步</p></li>
<li><p>开发任务描述尽量具体化，如有标题（User Story）、标签、正文内容、计划完成日期（Product Backlog 内的除外），若需要正文内容，必须要有清晰的描述，同时务必设置检查项（Task）。多人任务@相关人。如果是多人任务，第一个人为任务负责人</p></li>
<li><p>任务必须设置相关人关注，一般是Product Owner</p></li>
<li><p>开发任务的颗粒度务必适中，以一个人为执行单位计算，单个任务的最大执行周期不能超过1周，建议在1-3天左右。执行周期超过1周的必须拆分</p></li>
<li><p>执行中任务的计划日期如果到了且还没做完，必须在过期前及时联系相关负责人且必须填写变更具体原因（相关负责人可以在评审会议时并变更为新的计划日期）</p></li>
<li><p>列表中最上面的任务优先级最高，请自上而下顺序执行</p></li>
</ul>


<h2>3.2 责任/纠纷仲裁</h2>

<ul>
<li><p>以Worktile中的沟通记录为参考依据仲裁，责任视情况而定</p></li>
<li><p>如Worktile无沟通的，任务负责人（分配人）全责</p></li>
</ul>


<h1>4. 计划会议的规范</h1>

<p>迭代计划会议是指在每轮迭代开始时进行的计划会议，定义本轮迭代的目标，承诺本轮迭代中要完成的工作，提前识别和评估可能出现的风险，并通过合理的估算调整项目的迭代范围。</p>

<h2>4.1 目标</h2>

<ul>
<li><p>制定合理的迭代范围和目标</p></li>
<li><p>明确迭代的开发任务</p></li>
</ul>


<h2>4.2 要求</h2>

<ul>
<li><p>如无特殊原因，敏捷团队相关者均需参加</p></li>
<li><p>会议召开的时间，若无特殊情况，即固定时间:周一上午10点。若有特殊情况，必须及时通知所有相关者具体开会时间</p></li>
</ul>


<h2>4.3 内容</h2>

<ul>
<li><p>这里只讨论这次迭代内容和上次Sprint反馈</p></li>
<li><p>需要确定任务的优先级和相关负责人</p></li>
</ul>


<h1>5.评审会议的规范</h1>

<p>在每次Sprint冲刺结束，我们都需要进行一次评审会议，让团队向负责人展示已完成的功能。</p>

<p>如无特殊原因，敏捷团队相关者均需参加。</p>

<p>会议召开的时间，若无特殊情况，即固定时间:周五下午16点。若有特殊情况，必须及时通知所有相关者具体开会时间</p>

<h2>5.1 目标</h2>

<ul>
<li><p>加强团队的自我认可。</p></li>
<li><p>展示功能、回答疑问并记录所期望的更改与反馈。</p></li>
<li><p>评审会议可以吸引整个团队的关注，让其他人了解团队在做些什么，并得到重要反馈。</p></li>
<li><p>做演示也会迫使开发团队真正完成一些工作（比如那些完成了99%的功能）。 </p></li>
</ul>


<h2>5.2 要求</h2>

<ul>
<li><p>由Scrum Master主持并记录。</p></li>
<li><p>确保所有人员都清晰目标，如果有人对产品不知道，则花几分钟来进行描述。</p></li>
<li><p>团队根据本次迭代内容，逐个地介绍这次 Sprint 的结果，和演示新功能。</p></li>
<li><p>会议过程中，Scrum Master需要记录需求变更、新想法、新需求、Bug或问题以及障碍，并且会后以评论的方式记录到Worktile上，提供给下一次计划会议作参考</p></li>
<li><p>如果功能无法演示，则以报表或者报告甚至其他任意形式证明。</p></li>
<li><p>如果问题优先级特别高，需要以加班的形式在本次迭代开发完成，添加任务后请立即找相关人的讨论并做后续安排</p></li>
</ul>


<h2>5.3 会议结果</h2>

<ul>
<li><p>对这次 Sprint 的结果和整个产品的开发状态的共识</p></li>
<li><p>注意：让演示关注业务层次，不要关注技术细节。注意力放在“我们做了什么”，而不是“我们怎么做的”</p></li>
<li><p>有的Sprint可能会包含很多Bug修复等功能，在评审会议中不要演示太多一大堆细碎的Bug修复，除非这个很重要。</p></li>
</ul>


<h1>6.代码规范</h1>

<h2>6.1 注释</h2>

<ul>
<li><p>类型（类、结构、接口）、属性、事件、委托、方法、方法参数，根据需要添加注释。</p></li>
<li><p>如果类型、属性、事件、方法、方法参数的名称已经是自解释了，不需要加注释；否则需要添加注释。</p></li>
</ul>


<p>当添加注释时，添加方式如下图所示：</p>

<p><img src="./media/image3.png" alt="" /></p>

<h2>6.2 类型、字段、属性、方法、事件的命名</h2>

<ul>
<li>优先考虑英文，如果英文没有合适的单词描述，可以使用拼音，使用中文是不符合要求的。</li>
</ul>


<h2>6.3 不使用缩写</h2>

<ul>
<li><p>一般情况下，所有类型、方法、参数、变量的命名不得使用缩写，包括熟知的缩写，例如Msg。</p></li>
<li><p>一些游戏开发中常见的变量可以缩写，如：HP，ATK，DEF，MATK，MDEF等。</p></li>
</ul>


<h2>6.4 代码不使用半展开</h2>

<ul>
<li>第一步，打开Visual Studio，进入“工具”，“选项&hellip;”，如下图所示：</li>
</ul>


<p><img src="./media/image4.png" alt="" /></p>

<ul>
<li>第二步，进入“文本编辑器” “C#” “格式设置” “新行”，确保左侧所有复选框中的被选择，如下图所示：</li>
</ul>


<p><img src="./media/image5.png" alt="" /></p>

<ul>
<li>第三步，点击“确定”，完成设置。</li>
</ul>


<h2>6.5 使用Unix 换行符</h2>

<ul>
<li>第一步，打开Visual Studio 文件 高级保存选项</li>
</ul>


<p><img src="./media/image6.png" alt="" /></p>

<ul>
<li>第二步，在行结束选择使用Unix(LF)最为换行符</li>
</ul>


<p><img src="./media/image7.png" alt="" /></p>

<h2>6.6 使用Tab作为缩进，并设置缩进大小为4</h2>

<ul>
<li>第一步，打开Visual Studio，进入“工具”，“选项&hellip;”，如下图所示：</li>
</ul>


<p><img src="./media/image4.png" alt="" /></p>

<ul>
<li>第二步，进入“文本编辑器”，“C#”，“制表符”，如下图所示，设置制表符。</li>
</ul>


<p><img src="./media/image8.png" alt="" /></p>

<ul>
<li>第三步，点击“确定”，完成设置。</li>
</ul>


<h2>6.7 一个.cs源文件至多定义两个类型</h2>

<ul>
<li><p>如果两个类型的关系是紧密相关的，比如 产品、产品类型，此时Product类，和ProductType枚举可以定义在同一个Product.cs文件中。</p></li>
<li><p>但不能在一个.cs文件中出现两个不相关的类型定义，例如将 Product类和Reseller类（分销商）定义在一个BasicInfo.cs文件中。</p></li>
</ul>


<h2>6.8 类型名称和源文件名称必须一致</h2>

<ul>
<li>当类型命名为Product时，其源文件命名只能是Product.cs。</li>
</ul>


<h2>6.9 所有命名空间、类型名称使用Pascal风格（单词首字母大写）</h2>

<ul>
<li>如下图所示，红色标记的为使用Pascal风格的类型：</li>
</ul>


<p><img src="./media/image9.png" alt="" /></p>

<ul>
<li>注意ProductType是私有类型，不管类型是公有的还是私有的，其命名总是采用Pascal风格。</li>
</ul>


<h2>6.10 本地变量、方法参数名称使用Camel风格（首字母小写，其后每个单词的首字母大写）</h2>

<ul>
<li>红色标记的为使用Camel风格的变量或者方法参数：</li>
</ul>


<p><img src="./media/image10.png" alt="" /></p>

<h2>6.11 私有方法、受保护方法，仍使用Pascal风格命名</h2>

<ul>
<li>示例代码如下：</li>
</ul>


<p><img src="./media/image11.png" alt="" /></p>

<h2>6.12 如果if语句内容只有一行，可以不加花括号，但是必须和if语句位于同一行</h2>

<hr />

<p><img src="./media/image12.png" alt="" /></p>

<h2>6.13 调用类型内部其他成员，需加this；调用父类成员，需加base</h2>

<hr />

<ul>
<li>示例代码如下：</li>
</ul>


<p><img src="./media/image13.png" alt="" /></p>

<h2>6.14 类型内部的私有和受保护字段，使用Camel风格命名，但加“_”前缀</h2>

<hr />

<ul>
<li>代码示例如下：</li>
</ul>


<p><img src="./media/image14.png" alt="" /></p>

<h2>6.15 不能出现公有字段</h2>

<ul>
<li>如果需要公有字段，使用属性进行包装。</li>
</ul>


<h2>6.16 类型成员的排列顺序</h2>

<ul>
<li><p>类型成员的排列顺序自上而下依次为：</p></li>
<li><p>字段：私有字段、受保护字段</p></li>
<li><p>属性：私有属性、受保护属性、公有属性</p></li>
<li><p>事件：私有事件、受保护事件、公有事件</p></li>
<li><p>构造函数：参数数量最多的构造函数，参数数量中等的构造函数，参数数量最少的构造函数</p></li>
<li><p>方法：重载方法的排列顺序与构造函数相同，从参数数量最多往下至参数最少。</p></li>
</ul>


<p><img src="./media/image15.png" alt="" /></p>

<h2>6.17 委托和事件的命名</h2>

<ul>
<li><p>委托以EventHandler作为后缀命名，例如 SalesOutEventHandler。</p></li>
<li><p>事件以其对应的委托类型，去掉EventHandler后缀，并加上On前缀构成。</p></li>
<li><p>例如，对于SalesOutEventHandler委托类型的事件，其事件名称为：OnSalesOut。</p></li>
<li><p>示例代码如下：</p></li>
</ul>


<p><img src="./media/image16.png" alt="" /></p>

<h2>6.18 返回bool类型的方法、属性的命名</h2>

<hr />

<ul>
<li>如果方法返回的类型为bool类型，则其前缀为Is、Can或者 Try，例如：</li>
</ul>


<p><img src="./media/image17.png" alt="" /></p>

<h2>6.19 常见集合类型后缀命名</h2>

<ul>
<li>凡符合下表所列的集合类型，应添加相应的后缀。</li>
</ul>


<table class="table table-bordered table-striped table-condensed">
<tr>
<th>说明</th>
<th>后缀</th>
<th>示例</th>
</tr>
<tr>
<td>数组</td>
<td>Array</td>
<td>int[] productArray</td>
</tr>
<tr>
<td>列表</td>
<td>List</td>
<td>List<Product> productList</td>
</tr>
<tr>
<td>DataTable/HashTable</td>
<td>Table</td>
<td>HashTable productTable</td>
</tr>
<tr>
<td>字典</td>
<td>Dictionary</td>
<td>Dictionay<string,string> productDictionary</td>
</tr>
<tr>
<td>EF中的DbSet /DataSet</td>
<td>Set</td>
<td>DbSet<Product> productSet</td>
</tr>
</table>


<h1>7.设计原则与规范</h1>

<h2>7.1 遵守测试规则</h2>

<p>尽可能的编写单元测试，任务完成时先自我测试一遍。</p>

<h2>7.2 签入代码后注意查看持续集成的生成结果</h2>

<p>如果生成失败或者存在警告和错误，请及时解决，并作为优先级最高的任务来处理。</p>

<h2>7.3 简单原则</h2>

<p>简单设计，简单架构，简单编码还有简单评估，注重规范与重构。</p>
]]></content>
  </entry>
  
</feed>
